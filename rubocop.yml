# A note on how to override the Rubocop defaults:
# -> Hashes are *merged* with upstream defaults.
# -> Arrays are *overwritten* with our definition.

AllCops:

  # Keep this up-to-date with the Ruby version we use in Production.
  TargetRubyVersion: 2.3

  # By default Rubocop checks every .rb recursively inside the current directory.
  # We want to exclude some files, so let's modify the original Array.
  Exclude:

    # Our list here will override the Rubocop default exclusion list.
    # So we need to add the defaults first. You can find them here:
    # https://github.com/bbatsov/rubocop/blob/master/config/default.yml
    - vendor/**/*

    # We don't care much about auto-generated files.
    # There is no point in applying our style guide here.
    - db/schema.rb

    # Migrations are run once and never touched again.
    # Where there is no need for maintenance, there is no need for proper coding style.
    - db/migrate/*

    # It so happens that we use Ruby in some Node projects.
    # Let us avoid analyzing vendor ruby code that we do not control.
    - node_modules/**/*

# –––––––––––––––––––––––––––––––––––––––––––
# Please try to keep this list alphabetically
# –––––––––––––––––––––––––––––––––––––––––––

# We usually catch those in code reviews and this metric is causing
# a lot of noise and false positives.
Metrics/AbcSize:
  Enabled: false

# We usually catch those in code reviews and this metric is causing
# a lot of noise and false positives.
Metrics/CyclomaticComplexity:
  Enabled: false

# 80 characters can sometimes cause weird line breaks that make code less readable.
Metrics/LineLength:
  Max: 100
  Exclude:
    - config/routes.rb

# Less fuss about specs, these are even turned off for rubocops own
# specs.

Metrics/BlockLength:
  Exclude:
    - spec/**/*.rb
    - lib/engines/**/spec/**/*.rb
    - spec_legacy/**/*.rb
    - config/routes.rb

Metrics/ModuleLength:
  Exclude:
    - spec/**/*.rb
    - lib/engines/**/spec/**/*.rb
    - spec_legacy/**/*.rb

# This flags ** and _ as false positives and creates noise. We are careful enough with
# naming during code reviews that we don't need this
Naming/UncommunicativeMethodParamName:
  Enabled: false

# This is a pure performance immprovement without any other positive side-effects.
# We're willing to accept the performance penalty favoring code readability.
Performance/CaseWhenSplat:
  Enabled: false

# Using `#flat_map` is just not very intuitive and used utterly seldom.
# The performance penalty is minimal, so let us not forbid the usual `#map`
Performance/FixedSize:
  Enabled: false

# Using `#reverse_each` is mentally a little more challenging than just
# a simple `reverse.each`. The latter is not really much faster anyway.
Performance/ReverseEach:
  Enabled: false

# Of course you should use `#delete` to remove characters from a String.
# But we don't want to enforce you to use the non-intuitive `#tr` instead of `#gsub`
Performance/StringReplacement:
  Enabled: false

# UTF-8 ––––– in comments can improve readability ✔
# It's allowed as method names, so maybe it should be allowed as comment.
Style/AsciiComments:
  Enabled: false

# Top-level class documentation is cumbersome when starting/spiking a new project.
# Generally our code should be understandable without comments.
# Also, there are too many legacy classes without documentation that should not break rubocop.
Style/Documentation:
  Enabled: false

# An empty line below `class`, `module` and blocks can increase readability in many cases.
# For now, we allow this rule, but it's certainly open for discussion.
Layout/EmptyLinesAroundClassBody:
  Enabled: false
Layout/EmptyLinesAroundModuleBody:
  Enabled: false
Layout/EmptyLinesAroundBlockBody:
  Enabled: false

# This is a "heads-up" for Ruby 3.0.
# It only makes sense in Ruby >= 2.3, which we seldom use yet.
# But if we do, we don't want this to break yet, it's not probably mature enough either.
Style/FrozenStringLiteralComment:
  Enabled: false

# Feature flipping functionality depends on global variables so we whitelist them
Style/GlobalVars:
  Enabled: true
  AllowedVariables:
    - $flipper
    - $rollout

# `SomeClass.(some, arguments)` is considered "obscure" by Rubocop.
# It is not so obscure enough that we would forbid it, though.
Style/LambdaCall:
  Enabled: false

# When dealing with a lot of numbers, it can be cumbersome to add a lot of `_`.
# You may use `_` if you like, but it does not 100% add readability so we skip it.
Style/NumericLiterals:
  Enabled: false

# Excessive use of `self.` is just noise. But we don't generally forbid using it.
# See also https://github.com/bukowskis/style-guide/commit/9d1cad9d29c2064defd713386897591e8fb8f1be
Style/RedundantSelf:
  Enabled: false

# The ruby style guide cannot even agree on a standard for this.
# So we better disable this cop as it usually leads to too much discussion.
Style/StringLiterals:
  Enabled: false

# This is a false positive when converting return values. To use this
# for flow control would be questionable however that seems likely to
# get noticed in code review.
Style/DoubleNegation:
  Enabled: false
